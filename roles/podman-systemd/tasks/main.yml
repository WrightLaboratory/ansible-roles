---
# tasks file for podman-systemd
- name: create user
  ansible.builtin.user:
    name: "{{ vars.service_name }}"
    uid: "{{ vars.service_uid | int }}"
    system: true
    home: "/var/lib/{{ vars.service_name }}"
    shell: /bin/false

- name: create local data directory for user
  ansible.builtin.file:
    state: directory
    path: "/var/lib/{{ vars.service_name }}/data"
    owner: "{{ vars.service_name }}"
    group: "{{ vars.service_name }}"
    mode: '0700'

- name: create ansible temp directory
  ansible.builtin.file:
    state: directory
    path: /var/lib/{{ vars.service_name }}/.ansible/tmp
    owner: "{{ vars.service_name }}"
    group: "{{ vars.service_name }}"
    mode: '0700'

- name: set SELinux contexts for user directories
  block:
  - name: set context for system account home dir
    community.general.sefcontext:
      target: "/var/lib/{{ vars.service_name }}(/.+)?"
      setype: user_home_dir_t
      state: present
  - name: set context for system account home data dir
    community.general.sefcontext:
      target: "/var/lib/{{ vars.service_name }}/data(/.+)?"
      setype: container_file_t
      state: present
  - name: restore and apply labels
    ansible.builtin.command: 
      argv:
      - restorecon
      - -rv
      - /var/lib/{{ vars.service_name }}
    changed_when: false

- name: ensure lingering enabled
  ansible.builtin.command:
    argv:
    - loginctl
    - enable-linger
    - "{{ vars.service_name }}"
    creates: /var/lib/systemd/linger/{{ vars.service_name }}

- name: add subuid/subgid entries for {{ vars.service_name }}
  block:

  - name: get {{ vars.subuid_file }} contents
    ansible.builtin.command: cat {{ vars.subuid_file }}
    register: subuid
    changed_when: false
  - name: get {{ vars.subgid_file }} contents
    ansible.builtin.command: cat {{ vars.subgid_file }}
    register: subgid
    changed_when: false

  - name: add {{ vars.service_name }} user to {{ vars.subuid_file }}
    block:
    - name: add {{ vars.service_name }} as first user to {{ vars.subuid_file }}
      ansible.builtin.command: usermod -v 100000-165535 {{ vars.service_name }}
      when: subuid.stdout | trim | length == 0
    - name: add {{ vars.service_name }} as next user to {{ vars.subuid_file }}
      block:
      - name: get highest current value of subuid
        ansible.builtin.set_fact:
          highest_subuid: "{{ subuid.stdout_lines[-1].split(':')[1] }}"
      - name: add {{ vars.service_name }} to list of users in {{ vars.subuid_file }}
        ansible.builtin.command:
          argv:
          - usermod
          - -v
          - "{{ highest_subuid|int + 65536 }}-{{ highest_subuid|int + 65536 + 65536 -1 }}"
          - "{{ vars.service_name }}"
      when: subuid.stdout | trim | length > 0
    when: not subuid.stdout | regex_search(vars.service_name + ':')

  - name: add {{ vars.service_name }} user to {{ vars.subgid_file }}
    block:
    - name: add {{ vars.service_name }} as first user to {{ vars.subgid_file }}
      ansible.builtin.command: usermod -w 100000-165535 {{ vars.service_name }}
      when: subgid.stdout | trim | length == 0
    - name: add {{ vars.service_name }} as next user to {{ vars.subgid_file }}
      block:
      - name: get highest current value of subgid
        ansible.builtin.set_fact:
          highest_subgid: "{{ subgid.stdout_lines[-1].split(':')[1] }}"
      - name: add {{ vars.service_name }} to list of users in {{ vars.subgid_file }}
        ansible.builtin.command:
          argv:
          - usermod
          - -w
          - "{{ highest_subgid|int + 65536 }}-{{ highest_subgid|int + 65536 + 65536 -1 }}"
          - "{{ vars.service_name }}"
        when: subgid.stdout | trim | length > 0
    when: not subgid.stdout | regex_search(vars.service_name + ':')

- name: enbable podman socket
  ansible.builtin.systemd_service:
    name: podman.socket
    state: started
    enabled: true
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ vars.service_uid }}"
  become: true
  become_user: "{{ vars.service_name }}"  

- name: initialize podman .local/share/containers for {{ vars.service_name }}
  become_user: "{{ vars.service_name }}"
  block:
  - name: start busybox container
    containers.podman.podman_container:
      name: busybox
      image: busybox
      state: started
      user: 0:0
      detach: true
      interactive: true
      tty: true
      volumes: 
      - /var/lib/{{ vars.service_name }}/data:/data:z
  - name: execute command in busybox container
    containers.podman.podman_container_exec:
      name: busybox
      command: sh -c 'echo -n "In this container, I am ";id -un'
    register: container_out
  - name: print out command results
    ansible.builtin.debug:
      msg: "{{ container_out.stdout }}"
  - name: remove container
    containers.podman.podman_container:
      name: busybox
      state: absent

- name: reset context for storage
  # https://github.com/containers/podman/issues/3234
  # https://github.com/containers/podman/issues/18780
  block:
  - name: clone contexts
    community.general.sefcontext:
      target: /var/lib/{{ vars.service_name }}/.local/share/containers/storage
      equal: /var/lib/containers/storage
      state: present
  - name: restore and apply labels
    ansible.builtin.command: 
      argv:
      - restorecon
      - -Rv
      - /var/lib/{{ vars.service_name }}/.local/share/containers/storage
    changed_when: false