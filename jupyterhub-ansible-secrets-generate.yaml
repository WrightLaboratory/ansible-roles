---
- hosts: localhost

  tasks:
  - name: check for existence of ~/.ansible/jupyterhub-secrets.yaml
    ansible.builtin.stat:
      path: ~/.ansible/jupyterhub-secrets.yaml
    register: secrets_file

  - name: check for existence of ~/.ansible/password
    ansible.builtin.stat:
      path: ~/.ansible/password
    register: password_file

  - name: create secret file
    block:
    - name: create random string and save it in pg_password
      ansible.builtin.set_fact:
        pg_password: "{{ lookup('community.general.random_string', special=true, override_special='_-#+*', length=20, min_special=1, ignore_similar_chars=true) }}"
    - name: display postgres password
      ansible.builtin.debug:
        msg: "pg_password: {{ pg_password }}"
  
    - name: Pausing for Github client id
      ansible.builtin.pause:
        prompt: Github client id
      register: gh_client_id_prompt
      no_log: true
    - ansible.builtin.set_fact:
        gh_client_id: "{{ gh_client_id_prompt.user_input }}"
    - name: display Github client id
      ansible.builtin.debug:
        msg: "gh_client_id: {{ gh_client_id }}"
  
    - name: Pausing for Github client secret
      ansible.builtin.pause:
        prompt: Github client secret
      register: gh_client_secret_prompt
      no_log: true
    - ansible.builtin.set_fact:
        gh_client_secret: "{{ gh_client_secret_prompt.user_input }}"
    - name: display Github client secret
      ansible.builtin.debug:
        msg: "gh_client_secret: {{ gh_client_secret }}"
  
    - name: Pausing for Github OAuth callback url
      ansible.builtin.pause:
        prompt: Github OAuth callback url
      register: gh_oauth_callback_url_prompt
      no_log: true
    - ansible.builtin.set_fact:
        gh_oauth_callback_url: "{{ gh_oauth_callback_url_prompt.user_input }}"
    - name: display Github client callback url
      ansible.builtin.debug:
        msg: "gh_oauth_callback_url: {{ gh_oauth_callback_url }}"

    - name: create jupyterhub-secrets variable file in ~/.ansible on control node
      ansible.builtin.template:
        src: jupyterhub-ansible-secrets.yaml.j2
        dest: ~/.ansible/jupyterhub-secrets.yaml
        mode: '0600'
    when: not secrets_file.stat.exists

  - name: create default ansible vault password file with correct permissons
    ansible.builtin.copy:
      dest: ~/.ansible/password
      mode: '0600'
      content: |
        ***IMPORTANT***: Replace the contents of this line (no newline) with your ansible vault password in plaintext
    when: not password_file.stat.exists
