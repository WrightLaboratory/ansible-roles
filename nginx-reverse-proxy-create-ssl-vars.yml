- hosts: localhost
  connection: local
  gather_facts: yes

  tasks:
  - name: ensure ansible tmp exists
    ansible.builtin.file:
      path: "${HOME}/.ansible/tmp"
      mode: 0700

  - name: Find resulting key and certificate files
    ansible.builtin.find:
      paths: .
      patterns: "*.gz,*.tar.gz,*.tgz"
    register: find_results

  - name: extract files to ${HOME}/.ansible/tmp
    ansible.builtin.unarchive:
      src: "{{ item }}"
      dest: "${HOME}/.ansible/tmp"
    loop: "{{ find_results.files | map(attribute='path') | list }}"

  - name: set service_domain_name from root of filename
    ansible.builtin.set_fact:
      service_domain_name: "{{ find_results.files[0].path | basename| splitext |first }}"
  
  - name: show service_domain_name
    ansible.builtin.debug:
      msg: "service domain: {{ service_domain_name }}"

  - name: find cert file
    ansible.builtin.find:
      paths: "${HOME}/.ansible/tmp"
      patterns: "{{ service_domain_name }}.crt.pem"
    register: certfile_results

  - name: find key file
    ansible.builtin.find:
      paths: "${HOME}/.ansible/tmp"
      patterns: "{{ service_domain_name }}.key.pem"
    register: keyfile_results

  - name: slurp cert file
    ansible.builtin.slurp:
      path: "{{ certfile_results.files[0].path }}"
    register: certfile

  - name: slurp key file
    ansible.builtin.slurp:
      path: "{{ keyfile_results.files[0].path }}"
    register: keyfile

  - name: set cert value
    ansible.builtin.set_fact:
      service_cert: "{{ certfile.content | b64decode }}" 

  - name: set key value
    ansible.builtin.set_fact:
      service_key: "{{ keyfile.content | b64decode }}"

  - name: create ssl variables file
    ansible.builtin.template:
      src: nginx-reverse-proxy-ssl-vars.yml.j2
      dest: "${HOME}/.ansible/nginx-reverse-proxy-ssl-vars.yml"
